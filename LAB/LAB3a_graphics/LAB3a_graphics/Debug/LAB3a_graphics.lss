
LAB3a_graphics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000400  00800060  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001062  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087f  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006fe  00000000  00000000  000030ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000037a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  7a:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DisplayWrite>:
{
	uint8_t tmp = (0b111110);
	DisplayWrite(1, tmp,CONTROL);
	DisplayWrite(2, tmp,CONTROL);
	PORTC = ~(Status(1)|Status(2));
}
  82:	62 bb       	out	0x12, r22	; 18
  84:	9f ef       	ldi	r25, 0xFF	; 255
  86:	91 bb       	out	0x11, r25	; 17
  88:	2b b3       	in	r18, 0x1b	; 27
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	11 f0       	breq	.+4      	; 0x92 <DisplayWrite+0x10>
  8e:	90 e8       	ldi	r25, 0x80	; 128
  90:	01 c0       	rjmp	.+2      	; 0x94 <DisplayWrite+0x12>
  92:	90 e4       	ldi	r25, 0x40	; 64
  94:	84 2f       	mov	r24, r20
  96:	82 2b       	or	r24, r18
  98:	89 2b       	or	r24, r25
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	44 23       	and	r20, r20
  a0:	11 f0       	breq	.+4      	; 0xa6 <DisplayWrite+0x24>
  a2:	9b ef       	ldi	r25, 0xFB	; 251
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <DisplayWrite+0x26>
  a6:	9a ef       	ldi	r25, 0xFA	; 250
  a8:	89 23       	and	r24, r25
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	d9 9a       	sbi	0x1b, 1	; 27
	...
  c4:	d9 98       	cbi	0x1b, 1	; 27
  c6:	00 00       	nop
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8f 73       	andi	r24, 0x3F	; 63
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	da 9a       	sbi	0x1b, 2	; 27
  d0:	11 ba       	out	0x11, r1	; 17
  d2:	08 95       	ret

000000d4 <DisplayRead>:
  d4:	11 ba       	out	0x11, r1	; 17
  d6:	9b b3       	in	r25, 0x1b	; 27
  d8:	94 60       	ori	r25, 0x04	; 4
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	11 f0       	breq	.+4      	; 0xe2 <DisplayRead+0xe>
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <DisplayRead+0x10>
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	96 2b       	or	r25, r22
  e6:	98 2b       	or	r25, r24
  e8:	9b bb       	out	0x1b, r25	; 27
  ea:	9b b3       	in	r25, 0x1b	; 27
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	61 11       	cpse	r22, r1
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	00 00       	nop
  fe:	d9 9a       	sbi	0x1b, 1	; 27
	...
 110:	80 b3       	in	r24, 0x10	; 16
 112:	00 00       	nop
 114:	9b b3       	in	r25, 0x1b	; 27
 116:	9f 73       	andi	r25, 0x3F	; 63
 118:	9b bb       	out	0x1b, r25	; 27
 11a:	d9 98       	cbi	0x1b, 1	; 27
 11c:	08 95       	ret

0000011e <SetY>:
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
 122:	6f 73       	andi	r22, 0x3F	; 63
 124:	60 64       	ori	r22, 0x40	; 64
 126:	86 2f       	mov	r24, r22
 128:	80 95       	com	r24
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <SetPage>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	67 70       	andi	r22, 0x07	; 7
 146:	68 6b       	ori	r22, 0xB8	; 184
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <SetStartLine>:
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
 15e:	60 6c       	ori	r22, 0xC0	; 192
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <Status>:
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 178:	08 95       	ret

0000017a <ClearHalfScreen>:
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	d8 2f       	mov	r29, r24
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	0e 94 ad 00 	call	0x15a	; 0x15a <SetStartLine>
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	61 2f       	mov	r22, r17
 18c:	8d 2f       	mov	r24, r29
 18e:	0e 94 a0 00 	call	0x140	; 0x140 <SetPage>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	8d 2f       	mov	r24, r29
 196:	0e 94 8f 00 	call	0x11e	; 0x11e <SetY>
 19a:	c0 e4       	ldi	r28, 0x40	; 64
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	8d 2f       	mov	r24, r29
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 1a6:	c1 50       	subi	r28, 0x01	; 1
 1a8:	c9 f7       	brne	.-14     	; 0x19c <ClearHalfScreen+0x22>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	8d 2f       	mov	r24, r29
 1ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
 1b4:	18 30       	cpi	r17, 0x08	; 8
 1b6:	49 f7       	brne	.-46     	; 0x18a <ClearHalfScreen+0x10>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <DisplayInit>:
 1c0:	cf 93       	push	r28
 1c2:	1b ba       	out	0x1b, r1	; 27
 1c4:	11 ba       	out	0x11, r1	; 17
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	8a bb       	out	0x1a, r24	; 26
 1ca:	89 e9       	ldi	r24, 0x99	; 153
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <DisplayInit+0xe>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <DisplayInit+0x14>
 1d4:	dd 9a       	sbi	0x1b, 5	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 b9 00 	call	0x172	; 0x172 <Status>
 1dc:	c8 2f       	mov	r28, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 b9 00 	call	0x172	; 0x172 <Status>
 1e4:	8c 2b       	or	r24, r28
 1e6:	98 2f       	mov	r25, r24
 1e8:	90 95       	com	r25
 1ea:	95 bb       	out	0x15, r25	; 21
 1ec:	84 ff       	sbrs	r24, 4
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <DisplayInit+0x42>
	...
 200:	ea cf       	rjmp	.-44     	; 0x1d6 <DisplayInit+0x16>
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 95       	com	r24
 206:	85 bb       	out	0x15, r24	; 21
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 ad 00 	call	0x15a	; 0x15a <SetStartLine>
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 ad 00 	call	0x15a	; 0x15a <SetStartLine>
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <DisplayOn>:
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	6f e3       	ldi	r22, 0x3F	; 63
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	6f e3       	ldi	r22, 0x3F	; 63
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 b9 00 	call	0x172	; 0x172 <Status>
 236:	80 95       	com	r24
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret

0000023c <ClearScreen>:

// Clears all pixels at the whole screen (left and right)
void ClearScreen()
{
	ClearHalfScreen(1);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 bd 00 	call	0x17a	; 0x17a <ClearHalfScreen>
	ClearHalfScreen(2);
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 bd 00 	call	0x17a	; 0x17a <ClearHalfScreen>
 248:	08 95       	ret

0000024a <DisplayPic>:
}

// Displays a graphical image (whole screen)
// The parameter is a pointer to the bit array defining the image
void DisplayPic(const char *picArray)
{
 24a:	6f 92       	push	r6
 24c:	7f 92       	push	r7
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	7c 01       	movw	r14, r24
	for (uint8_t chip = 1; chip < 2+1; chip++)
 268:	bb 24       	eor	r11, r11
 26a:	b3 94       	inc	r11
	{
		SetStartLine(chip,0);
 26c:	61 2c       	mov	r6, r1
 26e:	71 2c       	mov	r7, r1
		{
			SetPage(chip, page);
			SetY(chip,0);
			for (uint8_t y = 0; y < 64; y++)
			{
				DisplayWrite(chip, picArray[page*128 + y + (chip == 1 ? 0 : 64)], DATA);
 270:	81 2c       	mov	r8, r1
 272:	91 2c       	mov	r9, r1
// The parameter is a pointer to the bit array defining the image
void DisplayPic(const char *picArray)
{
	for (uint8_t chip = 1; chip < 2+1; chip++)
	{
		SetStartLine(chip,0);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	8b 2d       	mov	r24, r11
 278:	0e 94 ad 00 	call	0x15a	; 0x15a <SetStartLine>
 27c:	c6 2c       	mov	r12, r6
 27e:	d7 2c       	mov	r13, r7
		
		for(uint8_t page = 0; page < 8; page++)
 280:	a1 2c       	mov	r10, r1
		{
			SetPage(chip, page);
 282:	6a 2d       	mov	r22, r10
 284:	8b 2d       	mov	r24, r11
 286:	0e 94 a0 00 	call	0x140	; 0x140 <SetPage>
			SetY(chip,0);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	8b 2d       	mov	r24, r11
 28e:	0e 94 8f 00 	call	0x11e	; 0x11e <SetY>
 292:	86 01       	movw	r16, r12
 294:	00 5c       	subi	r16, 0xC0	; 192
 296:	1f 4f       	sbci	r17, 0xFF	; 255
 298:	e6 01       	movw	r28, r12
			for (uint8_t y = 0; y < 64; y++)
			{
				DisplayWrite(chip, picArray[page*128 + y + (chip == 1 ? 0 : 64)], DATA);
 29a:	ce 01       	movw	r24, r28
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	b2 16       	cp	r11, r18
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <DisplayPic+0x5e>
 2a2:	20 e4       	ldi	r18, 0x40	; 64
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DisplayPic+0x62>
 2a8:	28 2d       	mov	r18, r8
 2aa:	39 2d       	mov	r19, r9
 2ac:	2e 0d       	add	r18, r14
 2ae:	3f 1d       	adc	r19, r15
 2b0:	f9 01       	movw	r30, r18
 2b2:	e8 0f       	add	r30, r24
 2b4:	f9 1f       	adc	r31, r25
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	60 81       	ld	r22, Z
 2ba:	8b 2d       	mov	r24, r11
 2bc:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
 2c0:	21 96       	adiw	r28, 0x01	; 1
		
		for(uint8_t page = 0; page < 8; page++)
		{
			SetPage(chip, page);
			SetY(chip,0);
			for (uint8_t y = 0; y < 64; y++)
 2c2:	c0 17       	cp	r28, r16
 2c4:	d1 07       	cpc	r29, r17
 2c6:	49 f7       	brne	.-46     	; 0x29a <DisplayPic+0x50>
			{
				DisplayWrite(chip, picArray[page*128 + y + (chip == 1 ? 0 : 64)], DATA);
			}
			DisplayRead(chip, CONTROL);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	8b 2d       	mov	r24, r11
 2cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
{
	for (uint8_t chip = 1; chip < 2+1; chip++)
	{
		SetStartLine(chip,0);
		
		for(uint8_t page = 0; page < 8; page++)
 2d0:	a3 94       	inc	r10
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	c8 0e       	add	r12, r24
 2d6:	d1 1c       	adc	r13, r1
 2d8:	28 e0       	ldi	r18, 0x08	; 8
 2da:	a2 12       	cpse	r10, r18
 2dc:	d2 cf       	rjmp	.-92     	; 0x282 <DisplayPic+0x38>

// Displays a graphical image (whole screen)
// The parameter is a pointer to the bit array defining the image
void DisplayPic(const char *picArray)
{
	for (uint8_t chip = 1; chip < 2+1; chip++)
 2de:	b3 94       	inc	r11
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	b8 12       	cpse	r11, r24
 2e4:	c7 cf       	rjmp	.-114    	; 0x274 <DisplayPic+0x2a>
			}
			DisplayRead(chip, CONTROL);
		}
	}
	//DisplayRead(chip, CONTROL);
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	8f 90       	pop	r8
 2fe:	7f 90       	pop	r7
 300:	6f 90       	pop	r6
 302:	08 95       	ret

00000304 <SetPixel>:
// Sets one pixel at x,y
// Notice: x = Horizontal (0-127), y = Vertical (0-63)
// This correspons to the "logical" x and y terms
// in contrast to the display internal definitions
void SetPixel(unsigned char x, unsigned char y)
{
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	18 2f       	mov	r17, r24
 310:	d6 2f       	mov	r29, r22
	//SetStartLine(chip,0);
	uint8_t chip = (x < 64 ? 1 : 2);
 312:	80 34       	cpi	r24, 0x40	; 64
 314:	10 f0       	brcs	.+4      	; 0x31a <SetPixel+0x16>
 316:	c2 e0       	ldi	r28, 0x02	; 2
 318:	01 c0       	rjmp	.+2      	; 0x31c <SetPixel+0x18>
 31a:	c1 e0       	ldi	r28, 0x01	; 1
	SetPage(chip,(y>>3));
 31c:	0d 2f       	mov	r16, r29
 31e:	06 95       	lsr	r16
 320:	06 95       	lsr	r16
 322:	06 95       	lsr	r16
 324:	60 2f       	mov	r22, r16
 326:	8c 2f       	mov	r24, r28
 328:	0e 94 a0 00 	call	0x140	; 0x140 <SetPage>
	SetY(chip,x);
 32c:	61 2f       	mov	r22, r17
 32e:	8c 2f       	mov	r24, r28
 330:	0e 94 8f 00 	call	0x11e	; 0x11e <SetY>
	
	DisplayRead(chip,DATA);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8c 2f       	mov	r24, r28
 338:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
	uint8_t tmp = DisplayRead(chip,DATA);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	8c 2f       	mov	r24, r28
 340:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
 344:	f8 2e       	mov	r15, r24
	DisplayRead(chip, CONTROL);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
	
	
	SetPage(chip,(y>>3));
 34e:	60 2f       	mov	r22, r16
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 a0 00 	call	0x140	; 0x140 <SetPage>
	SetY(chip,x);
 356:	61 2f       	mov	r22, r17
 358:	8c 2f       	mov	r24, r28
 35a:	0e 94 8f 00 	call	0x11e	; 0x11e <SetY>
	
	DisplayWrite(chip,tmp|(1u<<(0b111&y)),DATA);
 35e:	d7 70       	andi	r29, 0x07	; 7
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <SetPixel+0x66>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	da 95       	dec	r29
 36c:	e2 f7       	brpl	.-8      	; 0x366 <SetPixel+0x62>
 36e:	6f 29       	or	r22, r15
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 41 00 	call	0x82	; 0x82 <DisplayWrite>
	DisplayRead(chip, CONTROL);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 6a 00 	call	0xd4	; 0xd4 <DisplayRead>
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	08 95       	ret

0000038c <Draw_Horizontal_Line>:

// Draws one horizontal line
// "StartX, StartY" is the (logical) start position of the line
// "Length" is the line length in pixels
void Draw_Horizontal_Line(unsigned char StartX, unsigned char StartY, unsigned char Length)
{
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	for (uint8_t i = 0; i < Length; i++)
 392:	44 23       	and	r20, r20
 394:	59 f0       	breq	.+22     	; 0x3ac <Draw_Horizontal_Line+0x20>
 396:	16 2f       	mov	r17, r22
 398:	c8 2f       	mov	r28, r24
 39a:	d4 2f       	mov	r29, r20
 39c:	d8 0f       	add	r29, r24
	{
		SetPixel(StartX+i,StartY);
 39e:	61 2f       	mov	r22, r17
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 82 01 	call	0x304	; 0x304 <SetPixel>
 3a6:	cf 5f       	subi	r28, 0xFF	; 255
// Draws one horizontal line
// "StartX, StartY" is the (logical) start position of the line
// "Length" is the line length in pixels
void Draw_Horizontal_Line(unsigned char StartX, unsigned char StartY, unsigned char Length)
{
	for (uint8_t i = 0; i < Length; i++)
 3a8:	cd 13       	cpse	r28, r29
 3aa:	f9 cf       	rjmp	.-14     	; 0x39e <Draw_Horizontal_Line+0x12>
	{
		SetPixel(StartX+i,StartY);
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	08 95       	ret

000003b4 <main>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int main()
{
	DDRC = 0xFF;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	84 bb       	out	0x14, r24	; 20
	
	PORTC = 1;	
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	85 bb       	out	0x15, r24	; 21
  DisplayInit();
 3bc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DisplayInit>
  DisplayOn();
 3c0:	0e 94 0e 01 	call	0x21c	; 0x21c <DisplayOn>
  ClearScreen();
 3c4:	0e 94 1e 01 	call	0x23c	; 0x23c <ClearScreen>
  
  
  
  SetPixel (63,54);
 3c8:	66 e3       	ldi	r22, 0x36	; 54
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	0e 94 82 01 	call	0x304	; 0x304 <SetPixel>
  //_delay_ms(5000);
  SetPixel (64,55);
 3d0:	67 e3       	ldi	r22, 0x37	; 55
 3d2:	80 e4       	ldi	r24, 0x40	; 64
 3d4:	0e 94 82 01 	call	0x304	; 0x304 <SetPixel>
  //_delay_ms(5000);
  SetPixel (65,56); 
 3d8:	68 e3       	ldi	r22, 0x38	; 56
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	0e 94 82 01 	call	0x304	; 0x304 <SetPixel>

  //_delay_ms(5000);

  Draw_Horizontal_Line(7,11,100);
 3e0:	44 e6       	ldi	r20, 0x64	; 100
 3e2:	6b e0       	ldi	r22, 0x0B	; 11
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	0e 94 c6 01 	call	0x38c	; 0x38c <Draw_Horizontal_Line>

  Draw_Horizontal_Line(62,22,5);
 3ea:	45 e0       	ldi	r20, 0x05	; 5
 3ec:	66 e1       	ldi	r22, 0x16	; 22
 3ee:	8e e3       	ldi	r24, 0x3E	; 62
 3f0:	0e 94 c6 01 	call	0x38c	; 0x38c <Draw_Horizontal_Line>
  
  Draw_Horizontal_Line(7,12,100);
 3f4:	44 e6       	ldi	r20, 0x64	; 100
 3f6:	6c e0       	ldi	r22, 0x0C	; 12
 3f8:	87 e0       	ldi	r24, 0x07	; 7
 3fa:	0e 94 c6 01 	call	0x38c	; 0x38c <Draw_Horizontal_Line>
  
  Draw_Horizontal_Line(7,56,100);
 3fe:	44 e6       	ldi	r20, 0x64	; 100
 400:	68 e3       	ldi	r22, 0x38	; 56
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	0e 94 c6 01 	call	0x38c	; 0x38c <Draw_Horizontal_Line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	8f e3       	ldi	r24, 0x3F	; 63
 40c:	98 e3       	ldi	r25, 0x38	; 56
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
  
  _delay_ms(5000);
  
   
  DisplayPic(capitalletters);
 41a:	80 e6       	ldi	r24, 0x60	; 96
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 25 01 	call	0x24a	; 0x24a <DisplayPic>
  
  while(1)
  {}
 422:	ff cf       	rjmp	.-2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
