
LAB06_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063e  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058c  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000278  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRA = 0x00; //inputs
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xFF; //outputs
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	
	PORTC = 0b1111;
  72:	8f e0       	ldi	r24, 0x0F	; 15
  74:	85 bb       	out	0x15, r24	; 21
  76:	2a e0       	ldi	r18, 0x0A	; 10
		{
			for(uint8_t i = 0; i < 10; i++)
			{
				PORTC = 0x00;
				_delay_ms(50);
				PORTC = 0xFF;
  78:	9f ef       	ldi	r25, 0xFF	; 255
	
	PORTC = 0b1111;
	
    while (1) 
    {
		if((~PINA) & 0b1 == 1) // jump to boot
  7a:	c8 99       	sbic	0x19, 0	; 25
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
  7e:	82 2f       	mov	r24, r18
		{
			for(uint8_t i = 0; i < 10; i++)
			{
				PORTC = 0x00;
  80:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	ef ef       	ldi	r30, 0xFF	; 255
  84:	f3 eb       	ldi	r31, 0xB3	; 179
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x1a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
				_delay_ms(50);
				PORTC = 0xFF;
  8e:	95 bb       	out	0x15, r25	; 21
  90:	ef ef       	ldi	r30, 0xFF	; 255
  92:	f3 eb       	ldi	r31, 0xB3	; 179
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	81 50       	subi	r24, 0x01	; 1
	
    while (1) 
    {
		if((~PINA) & 0b1 == 1) // jump to boot
		{
			for(uint8_t i = 0; i < 10; i++)
  9e:	81 f7       	brne	.-32     	; 0x80 <main+0x14>
				_delay_ms(50);
				PORTC = 0xFF;
				_delay_ms(50);
			}
			
			__asm("jmp 0x3C00");
  a0:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__stack+0x33a1>
  a4:	ea cf       	rjmp	.-44     	; 0x7a <main+0xe>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
