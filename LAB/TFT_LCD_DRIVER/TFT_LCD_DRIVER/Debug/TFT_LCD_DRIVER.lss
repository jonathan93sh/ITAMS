
TFT_LCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a55  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000502  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036d  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	
	TFT_init();
  6c:	0e 94 b0 00 	call	0x160	; 0x160 <TFT_init>
	
    while (1) 
    {
    }
  70:	ff cf       	rjmp	.-2      	; 0x70 <main+0x4>

00000072 <execute_cmd>:
#define INPUT 0x00
#define OUTPUT 0xFF

void execute_cmd(uint8_t cmd)
{
	DATA_PORT = cmd;
  72:	85 bb       	out	0x15, r24	; 21
	//TFT_write_data(cmd);
	//TFT_write_com(0b0011);
	CONTROL_PORT = 0b10011;
  74:	83 e1       	ldi	r24, 0x13	; 19
  76:	88 bb       	out	0x18, r24	; 24
	TFT_DELAY_tcsf;
  78:	00 00       	nop
	//TFT_write_com(0b0010);
	CONTROL_PORT = 0b10010;
  7a:	92 e1       	ldi	r25, 0x12	; 18
  7c:	98 bb       	out	0x18, r25	; 24
	TFT_DELAY_tcs;
  7e:	00 00       	nop
	//TFT_write_com(0b0011);
	CONTROL_PORT = 0b10011;
  80:	88 bb       	out	0x18, r24	; 24
	TFT_DELAY_wch;
  82:	00 00       	nop
  84:	08 95       	ret

00000086 <send_data>:
}

void send_data(uint8_t data)
{
	//TFT_write_data(data);
	DATA_PORT = data;
  86:	85 bb       	out	0x15, r24	; 21
	//TFT_write_com(0b0010);
	CONTROL_PORT = 0b10010;
  88:	82 e1       	ldi	r24, 0x12	; 18
  8a:	88 bb       	out	0x18, r24	; 24
	TFT_DELAY_wcl;
  8c:	00 00       	nop
	//TFT_write_com(0b0011);
	CONTROL_PORT = 0b10011;
  8e:	83 e1       	ldi	r24, 0x13	; 19
  90:	88 bb       	out	0x18, r24	; 24
	TFT_DELAY_wch;
  92:	00 00       	nop
  94:	08 95       	ret

00000096 <receive_data>:

void receive_data(uint8_t *dataPtr)
{
	
	//TFT_write_com(0b0001);
	CONTROL_PORT = 0b10001;
  96:	21 e1       	ldi	r18, 0x11	; 17
  98:	28 bb       	out	0x18, r18	; 24
	...
	TFT_DELAY_trcsfm;
  a2:	00 00       	nop
	*dataPtr = DATA_PIN;
  a4:	23 b3       	in	r18, 0x13	; 19
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	//TFT_write_com(0b0011);
	CONTROL_PORT = 0b10011;
  aa:	83 e1       	ldi	r24, 0x13	; 19
  ac:	88 bb       	out	0x18, r24	; 24
	TFT_DELAY_trdhfm;
  ae:	00 00       	nop
  b0:	00 00       	nop
	TFT_DELAY_tcsf;
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <TFT_write_data>:
/**
 * Tilskrive til skærmen, ved først at sende kommando og eventuelt data efterfølgende.
 * datasize = er længden af data.
**/
void TFT_write_data(uint8_t cmd, uint8_t *data, size_t datasize)
{
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	7b 01       	movw	r14, r22
  c4:	8a 01       	movw	r16, r20
	CONTROL_PORT = 0b11011;
  c6:	9b e1       	ldi	r25, 0x1B	; 27
  c8:	98 bb       	out	0x18, r25	; 24

	execute_cmd(cmd);
  ca:	0e 94 39 00 	call	0x72	; 0x72 <execute_cmd>
	
	for (size_t i = 0; i < datasize; i++)
  ce:	01 15       	cp	r16, r1
  d0:	11 05       	cpc	r17, r1
  d2:	49 f0       	breq	.+18     	; 0xe6 <TFT_write_data+0x30>
  d4:	e7 01       	movw	r28, r14
  d6:	0e 0d       	add	r16, r14
  d8:	1f 1d       	adc	r17, r15
	{
		send_data(data[i]);
  da:	89 91       	ld	r24, Y+
  dc:	0e 94 43 00 	call	0x86	; 0x86 <send_data>
{
	CONTROL_PORT = 0b11011;

	execute_cmd(cmd);
	
	for (size_t i = 0; i < datasize; i++)
  e0:	c0 17       	cp	r28, r16
  e2:	d1 07       	cpc	r29, r17
  e4:	d1 f7       	brne	.-12     	; 0xda <TFT_write_data+0x24>
	{
		send_data(data[i]);
	}
	CONTROL_PORT = 0b11011;
  e6:	8b e1       	ldi	r24, 0x1B	; 27
  e8:	88 bb       	out	0x18, r24	; 24
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	08 95       	ret

000000f8 <TFT_read_data>:
/**
 * Bruges til at aflæse fra skærmen eventuelt status beskeder.
 * return er længden af hvor data der er hentet.
**/
size_t TFT_read_data(uint8_t cmd, uint8_t *dataOut, size_t bufSize)
{
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	7b 01       	movw	r14, r22
 110:	6a 01       	movw	r12, r20
	CONTROL_PORT = 0b11011;
 112:	9b e1       	ldi	r25, 0x1B	; 27
 114:	98 bb       	out	0x18, r25	; 24
	execute_cmd(cmd);
 116:	0e 94 39 00 	call	0x72	; 0x72 <execute_cmd>
	DATA_DDR = INPUT;
 11a:	14 ba       	out	0x14, r1	; 20
	DATA_PORT = 0x00;
 11c:	15 ba       	out	0x15, r1	; 21
	uint8_t dummy;
	receive_data(&dummy);
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0e 94 4b 00 	call	0x96	; 0x96 <receive_data>
	for (size_t i = 0; i < bufSize; i++)
 126:	c1 14       	cp	r12, r1
 128:	d1 04       	cpc	r13, r1
 12a:	59 f0       	breq	.+22     	; 0x142 <TFT_read_data+0x4a>
 12c:	87 01       	movw	r16, r14
 12e:	ec 0c       	add	r14, r12
 130:	fd 1c       	adc	r15, r13
	{
		receive_data(dataOut + i);
 132:	c8 01       	movw	r24, r16
 134:	0e 94 4b 00 	call	0x96	; 0x96 <receive_data>
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
	execute_cmd(cmd);
	DATA_DDR = INPUT;
	DATA_PORT = 0x00;
	uint8_t dummy;
	receive_data(&dummy);
	for (size_t i = 0; i < bufSize; i++)
 13c:	0e 15       	cp	r16, r14
 13e:	1f 05       	cpc	r17, r15
 140:	c1 f7       	brne	.-16     	; 0x132 <TFT_read_data+0x3a>
	{
		receive_data(dataOut + i);
	}
	DATA_DDR = OUTPUT;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	84 bb       	out	0x14, r24	; 20
	CONTROL_PORT = 0b11011;
 146:	8b e1       	ldi	r24, 0x1B	; 27
 148:	88 bb       	out	0x18, r24	; 24
	return bufSize; //todo fix
}
 14a:	c6 01       	movw	r24, r12
 14c:	0f 90       	pop	r0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	cf 90       	pop	r12
 15e:	08 95       	ret

00000160 <TFT_init>:

void TFT_init()
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <TFT_init+0x6>
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	DDRA = OUTPUT;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a bb       	out	0x1a, r24	; 26
	PORTA = ~(0b01);
 16e:	9e ef       	ldi	r25, 0xFE	; 254
 170:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	39 e6       	ldi	r19, 0x69	; 105
 176:	98 e1       	ldi	r25, 0x18	; 24
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	30 40       	sbci	r19, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <TFT_init+0x18>
 180:	00 c0       	rjmp	.+0      	; 0x182 <TFT_init+0x22>
 182:	00 00       	nop
	_delay_ms(500);
	DATA_DDR = OUTPUT;
 184:	84 bb       	out	0x14, r24	; 20
	CONTROL_DDR = OUTPUT;
 186:	87 bb       	out	0x17, r24	; 23
	CONTROL_PORT = 0b11011;
 188:	8b e1       	ldi	r24, 0x1B	; 27
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	37 ea       	ldi	r19, 0xA7	; 167
 190:	81 e6       	ldi	r24, 0x61	; 97
 192:	21 50       	subi	r18, 0x01	; 1
 194:	30 40       	sbci	r19, 0x00	; 0
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <TFT_init+0x32>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <TFT_init+0x3c>
 19c:	00 00       	nop
	_delay_ms(2000);
	//TFT_write_data(TFT_SW_RESET, NULL, 0);
	PORTA = ~(2u);
 19e:	8d ef       	ldi	r24, 0xFD	; 253
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	29 e6       	ldi	r18, 0x69	; 105
 1a6:	38 e1       	ldi	r19, 0x18	; 24
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	30 40       	sbci	r19, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <TFT_init+0x48>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <TFT_init+0x52>
 1b2:	00 00       	nop
	_delay_ms(500);
	
	uint8_t tmp = (0b110<<TFT_DPI)|(0b110<<TFT_DBI); // RGB = 18bit, MCU = 18bit
 1b4:	86 e6       	ldi	r24, 0x66	; 102
 1b6:	89 83       	std	Y+1, r24	; 0x01
	TFT_write_data(TFT_INTERFACE_PIXEL_FORMAT, &tmp, 1);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	8a e3       	ldi	r24, 0x3A	; 58
 1c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <TFT_write_data>
	
	while(1)
	{
		TFT_write_data(TFT_DISPLAY_ON, NULL, 0);
		PORTA = ~(1u);
 1c8:	0e ef       	ldi	r16, 0xFE	; 254
		_delay_ms(500);
		TFT_write_data(TFT_DISPLAY_OFF, NULL, 0);
		PORTA = ~(0u);
 1ca:	1f ef       	ldi	r17, 0xFF	; 255
	uint8_t tmp = (0b110<<TFT_DPI)|(0b110<<TFT_DBI); // RGB = 18bit, MCU = 18bit
	TFT_write_data(TFT_INTERFACE_PIXEL_FORMAT, &tmp, 1);
	
	while(1)
	{
		TFT_write_data(TFT_DISPLAY_ON, NULL, 0);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	89 e2       	ldi	r24, 0x29	; 41
 1d6:	0e 94 5b 00 	call	0xb6	; 0xb6 <TFT_write_data>
		PORTA = ~(1u);
 1da:	0b bb       	out	0x1b, r16	; 27
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	99 e6       	ldi	r25, 0x69	; 105
 1e0:	28 e1       	ldi	r18, 0x18	; 24
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <TFT_init+0x82>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <TFT_init+0x8c>
 1ec:	00 00       	nop
		_delay_ms(500);
		TFT_write_data(TFT_DISPLAY_OFF, NULL, 0);
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	88 e2       	ldi	r24, 0x28	; 40
 1f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <TFT_write_data>
		PORTA = ~(0u);
 1fc:	1b bb       	out	0x1b, r17	; 27
 1fe:	3f ef       	ldi	r19, 0xFF	; 255
 200:	89 e6       	ldi	r24, 0x69	; 105
 202:	98 e1       	ldi	r25, 0x18	; 24
 204:	31 50       	subi	r19, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <TFT_init+0xa4>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <TFT_init+0xae>
 20e:	00 00       	nop
		_delay_ms(500);
		
		uint8_t test = 0;
 210:	1a 82       	std	Y+2, r1	; 0x02
		TFT_read_data(TFT_READ_PIXEL_FORMAT, &test,1);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	be 01       	movw	r22, r28
 218:	6e 5f       	subi	r22, 0xFE	; 254
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 7c 00 	call	0xf8	; 0xf8 <TFT_read_data>
		PORTA = ~test;
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	80 95       	com	r24
 226:	8b bb       	out	0x1b, r24	; 27
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	39 e6       	ldi	r19, 0x69	; 105
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	30 40       	sbci	r19, 0x00	; 0
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <TFT_init+0xce>
 236:	00 c0       	rjmp	.+0      	; 0x238 <TFT_init+0xd8>
 238:	00 00       	nop
		_delay_ms(500);
	}
 23a:	c8 cf       	rjmp	.-112    	; 0x1cc <TFT_init+0x6c>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
